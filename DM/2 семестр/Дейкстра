import heapq
def dijkstra(graph, start):
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0
    queue = []
    heapq.heappush(queue, [distances[start], start])

    while queue:
        current_distance, current_vertex = heapq.heappop(queue)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, [distance, neighbor])
    return distances
with open("f.txt") as f:
  # N - Количество вершин графа
  # M - Количество ребер в графе
  N, M = map(int, f.readline().split())
  graph = {i: {} for i in range(1, N+1)}
  for _ in range(M):
      start, end, cost = map(int, f.readline().split())
      graph[start][end] = cost
      graph[end][start] = cost
