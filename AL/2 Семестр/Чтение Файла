using System;
using System.Collections.Generic;
using System.IO;


class Program {
  public static void Main (string[] args) {
    StreamReader reader = new StreamReader("input");
    List<string[]> list = new List<string[]>();
    Array.ForEach(reader.ReadToEnd().Split("\n"), e => list.Add(e.Split(" ")));
    ConsoleMenu menu = new ConsoleMenu("file::>");
    menu.Add("town", new SearchByTownItem(list));
    menu.Add("fam", new SearchByFamilyItem(list));
    menu.Add("fnt", new SearchByFamilyAndTownItem(list));
    menu.Run();
  }
}

class ConsoleMenu{

  private Dictionary<string, MenuItem> Items;
  public string Welcome;

  public ConsoleMenu(string welcome){
    Items = new Dictionary<string, MenuItem>();
    Welcome = welcome;
    Items.Add("help", new MenuItem("Display help", Help));
    Items.Add("exit", new MenuItem("Exit menu", ()=>{}));
  }

  private void Help(){
    foreach(var i in Items){
      Console.WriteLine($"{i.Key}\t\t-\t\t{i.Value.Description}");
    }
  } 

  public void Add(string key, MenuItem item){
    Items[key] = item;
  }

  public void Run(){
    while(true){
      Console.Write(Welcome);
      string command = Console.ReadLine().Trim();
      if(command == "exit"){
        break;
      }
      if(Items.ContainsKey(command)){
        try{
          Items[command].Run();
        } catch (Exception e){
          Console.WriteLine($"Error! - [{e.Message}]");
        }
      } else {
        Console.WriteLine("Command not found");
      }
    }
  }
}

class MenuItem{
  public delegate void Job();

  public string Description;
  public Job Exec;

  public MenuItem(string description, Job job){
    Description = description;
    Exec = job;
  }

  protected MenuItem(string description){
    Description = description;
    Exec = ()=>{};
  }

  protected void AddJob(Job job){
    Exec = job;
  }

  public void Run(){
    Exec();
  }
}

class SearchByTownItem : MenuItem{
  private List<string[]> Records;
  public SearchByTownItem(List<string[]> records) : base("Поиск по городу"){
    Records = records;
    AddJob(SearchByTown);
  }

  private void SearchByTown(){
    Console.Write("Введите город: ");
    string town = Console.ReadLine();
    Records.FindAll(e => e[4] == town).ForEach(e => Console.WriteLine(string.Join(" ", e)));
  }
}

class SearchByFamilyItem : MenuItem{
  private List<string[]> Records;
  public SearchByFamilyItem(List<string[]> records) : base("Поиск по фамилии"){
    Records = records;
    AddJob(Do);
  }

  private void Do(){
    Console.Write("Введите фамилию: ");
    string family = Console.ReadLine();
    Records.FindAll(e => e[0] == family).ForEach(e => Console.WriteLine(string.Join(" ", e)));
  }
}

class SearchByFamilyAndTownItem : MenuItem{
  private List<string[]> Records;
  public SearchByFamilyAndTownItem(List<string[]> records) : base("Поиск по фамилии и городу"){
    Records = records;
    AddJob(Do);
  }

  private void Do(){
    Console.Write("Введите фамилию: ");
    string family = Console.ReadLine();
    Console.Write("Введите город: ");
    string town = Console.ReadLine();
    Records.FindAll(e => e[0] == family).FindAll(e => e[4] == town).ForEach(e => Console.WriteLine(string.Join(" ", e)));
  }
}
