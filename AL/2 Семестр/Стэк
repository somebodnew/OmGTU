using System;
using System.Collections.Generic;

class Program {
  public static void Main (string[] args) {
    ConsoleMenu menu = new ConsoleMenu("prj::>");
    menu.Add("brackets", new BracketVerificationItem());
    menu.Add("rpn", new RPNItem());
    menu.Run();
  }
}

class ConsoleMenu{

  private Dictionary<string, MenuItem> Items;
  public string Welcome;

  public ConsoleMenu(string welcome){
    Items = new Dictionary<string, MenuItem>();
    Welcome = welcome;
    Items.Add("help", new MenuItem("Display help", Help));
    Items.Add("exit", new MenuItem("Exit menu", ()=>{}));
  }

  private void Help(){
    foreach(var i in Items){
      Console.WriteLine($"{i.Key}\t\t-\t\t{i.Value.Description}");
    }
  } 

  public void Add(string key, MenuItem item){
    Items[key] = item;
  }

  public void Run(){
    while(true){
      Console.Write(Welcome);
      string command = Console.ReadLine().Trim();
      if(command == "exit"){
        break;
      }
      if(Items.ContainsKey(command)){
        try{
          Items[command].Run();
        } catch (Exception e){
          Console.WriteLine($"Error! - [{e.Message}]");
        }
      } else {
        Console.WriteLine("Command not found");
      }
    }
  }
}

class MenuItem{
  public delegate void Job();

  public string Description;
  public Job Exec;

  public MenuItem(string description, Job job){
    Description = description;
    Exec = job;
  }

  protected MenuItem(string description){
    Description = description;
    Exec = ()=>{};
  }

  protected void AddJob(Job job){
    Exec = job;
  }

  public void Run(){
    Exec();
  }
}

class BracketVerificationItem : MenuItem{
  public BracketVerificationItem() : base("Verify brackets"){
    AddJob(Do);
  }

  private void Do(){
    Dictionary<char, char> brackets = new Dictionary<char, char>();
    brackets.Add(')', '(');
    brackets.Add(']', '[');
    brackets.Add('}', '{');
    Console.WriteLine("Введите строку");
    string input = Console.ReadLine();
    Stack<char> stack = new Stack<char>();
    foreach(var c in input){
      if(c == '(' || c == '[' || c == '{'){
        stack.Push(c);
      } else if(c == ')' || c == ']' || c == '}'){
        if(stack.Pop() != brackets[c]) {
          Console.WriteLine("Последовательность не верна");
          return;
        }
      } else {
        throw new Exception("Неверный символ");
      }
    }
    Console.WriteLine("Последовательность верна");
  }
}

class RPNItem : MenuItem{
  public RPNItem() : base("Verify reverse poland notation"){
    AddJob(Do);
  }

  private void Do(){
    Console.WriteLine("Введите выражение");
    string[] input = Console.ReadLine().Split(" ");
    Stack<int> stack = new Stack<int>();
    foreach(var s in input){
      if(s == "+" || s == "-" || s == "*" || s == "/"){
        int a = stack.Pop();
        int b = stack.Pop();
        switch(s){
          case "+":
            stack.Push(a + b);
            break;
          case "-":
            stack.Push(b - a);
            break;
          case "*":
            stack.Push(a * b);
            break;
          case "/":
            stack.Push(b / a);
            break;
        }
      } else {
        stack.Push(int.Parse(s));
      }
    }
    if(stack.Count != 1) throw new Exception("Неверное выражение");
    Console.WriteLine($"Результат: {stack.Pop()}");
  }
}
